# THIS IS A GENERATED FILE, DO NOT EDIT!
# Copyright (C) 2017, Kevin Brubeck Unhammer <unhammer@fsfe.org>

# This program is free software: you can redistribute it and/or modify

# it under the terms of the GNU General Public License as published by

# the Free Software Foundation, either version 3 of the License, or

# (at your option) any later version.

# This program is distributed in the hope that it will be useful,

# but WITHOUT ANY WARRANTY; without even the implied warranty of

# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License

# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#

#  Root element:

pipespec = element pipespec { attlist.pipespec, pipeline+ }
attlist.pipespec &=

  attribute language { text },
  attribute developer { text }?,
  attribute copyright { text }?,
  attribute contact { text }?,
  attribute version { text }?,
  attribute depversions { text }?,
  attribute default-pipe { text }?
# == pipespec attributes ==
#   language:    BCP-47, default language code for pipelines in this spec
#   contact:     typically an e-mail address
#   version:     version of this module
#   depversions: versions of sub-modules used by the pipeline, e.g. hfst
pipeline =
  element pipeline {
    attlist.pipeline,
    prefs?,
    (sh
     | cg
     | cgspell
     | tokenize
     | tokenise
     | mwesplit
     | blanktag
     | suggest)+
  }
attlist.pipeline &=

  attribute name { xsd:ID },
  attribute language { text }?,
  attribute type { text }?
# == pipeline attributes ==
#   name:        user-readable, but unique name of the pipeline
#   language:    BCP-47, may override the language code of the pipespec
prefs = element prefs { attlist.prefs, pref+ }
attlist.prefs &= empty

pref = element pref { attlist.pref, option+ }
attlist.pref &=

  attribute type { text },
  attribute name { text }
# type and name are *not* unique here; several pipelines may have a pref for e.g. "Oxford comma"
option = element option { attlist.option, label+ }
attlist.option &= attribute err-id { text }

Text = (text | em)*
label = element label { attlist.label, Text }
attlist.label &= attribute xml:lang { text }

# General "system" command – pipelines with this can only be used
# in settings where we can open processes:
sh = element sh { attlist.sh, arg* }
# NOT IMPLEMENTED YET
attlist.sh &= attribute prog { text }

# Library-based commands – no IPC/process open() required since
# these just use linked libraries:
cg = element cg { attlist.cg, \grammar }
attlist.cg &= empty

# arg: grammar.cg3
cgspell =
  element cgspell {
    attlist.cgspell,
    ((lexicon, errmodel) | (errmodel, lexicon))
  }
attlist.cgspell &= empty

# arg1: acceptor.hfstol, arg2: errmodel.hfst
tokenize = element tokenize { attlist.tokenize, tokenizer }
attlist.tokenize &= empty

# arg: tokeniser.pmhfst
tokenise = element tokenise { attlist.tokenise, tokenizer }
attlist.tokenise &= empty

# en_GB alias of the above
mwesplit = element mwesplit { attlist.mwesplit, empty }
attlist.mwesplit &= empty

# takes no arguments
blanktag = element blanktag { attlist.blanktag, blanktagger }
attlist.blanktag &= empty

# arg: blanktagger.hfst
suggest =
  element suggest {
    attlist.suggest,
    ((generator, messages) | (messages, generator))
  }
attlist.suggest &= empty

# arg1: generator.hfstol, arg2: error_messages.xml

# Is there a way to generalize over these apart from shifting to <arg key=… val=…>?
arg = element arg { attlist.arg, empty }
attlist.arg &= attribute n { text }

\grammar = element grammar { attlist.grammar, empty }
attlist.grammar &= attribute n { text }

lexicon = element lexicon { attlist.lexicon, empty }
attlist.lexicon &= attribute n { text }

errmodel = element errmodel { attlist.errmodel, empty }
attlist.errmodel &= attribute n { text }

tokenizer = element tokenizer { attlist.tokenizer, empty }
attlist.tokenizer &= attribute n { text }

blanktagger = element blanktagger { attlist.blanktagger, empty }
attlist.blanktagger &= attribute n { text }

generator = element generator { attlist.generator, empty }
attlist.generator &= attribute n { text }

messages = element messages { attlist.messages, empty }
attlist.messages &= attribute n { text }

em |= notAllowed
start = pipespec
