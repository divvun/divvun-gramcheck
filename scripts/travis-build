#!/bin/bash

set -e -u

if [[ ${COVERITY_SCAN_BRANCH-0} = 1 ]]; then
    echo 'On coverity_scan branch, not running usual travis build + test suite.'
    for f in cov-int/*log.txt; do
        test -f "$f" && echo "== $f ==" && cat "$f"
    done
    exit 0
fi

cd "$(dirname "$0")/.."

export PKG_CONFIG_PATH LD_LIBRARY_PATH DYLD_LIBRARY_PATH LDFLAGS CPPFLAGS

if [[ $TRAVIS_OS_NAME = osx ]]; then
    # Stuff from nightly goes in plain /usr/local:
    PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/usr/local/share/pkgconfig:/usr/local/lib/pkgconfig"
    ACLOCAL_PATH="${ACLOCAL_PATH:-}:/usr/local/share/aclocal"
    PATH="${PATH}:/usr/local/bin"

    brew update || brew update || true
    brew ls --versions pugixml    || brew install pugixml    || brew install pugixml
    brew ls --versions libarchive || brew install libarchive || brew install libarchive
    brew ls --versions swig       || brew install swig       || brew install swig
    brew ls --versions pyenv      || brew install pyenv      || brew install pyenv
    brew ls --versions gawk       || brew install gawk       || brew install gawk
    brew ls --versions zlib       || brew install zlib       || brew install zlib
    brew ls --versions readline   || brew install readline   || brew install readline
    brew ls --versions bzip2      || brew install bzip2      || brew install bzip2
    brew ls --versions openssl    || brew install openssl    || brew install openssl

    eval "$(pyenv init -)"
    pyenv install 3.6.3
    pyenv global 3.6.3

    # brew puts pugixml/libarchive outside the regular paths:
    LDFLAGS="${LDFLAGS:-} -L/usr/local/Cellar/pugixml/1.9/lib/pugixml-1.9"
    LDFLAGS="${LDFLAGS:-} -L/usr/local/opt/libarchive/lib"
    LDFLAGS="${LDFLAGS:-} -L$(brew --prefix zlib)/lib"
    LDFLAGS="${LDFLAGS:-} -L$(brew --prefix readline)/lib"
    LDFLAGS="${LDFLAGS:-} -L$(brew --prefix bzip2)/lib"
    LDFLAGS="${LDFLAGS:-} -L$(brew --prefix openssl)/lib"
    LDFLAGS="${LDFLAGS:-} -L$(xcrun --show-sdk-path)/usr/lib"
    CPPFLAGS="${CPPFLAGS:-} -I/usr/local/Cellar/pugixml/1.9/include/pugixml-1.9"
    CPPFLAGS="${CPPFLAGS:-} -I/usr/local/opt/libarchive/include"
    CPPFLAGS="${CPPFLAGS:-} -I$(brew --prefix zlib)/include"
    CPPFLAGS="${CPPFLAGS:-} -I$(brew --prefix readline)/include"
    CPPFLAGS="${CPPFLAGS:-} -I$(brew --prefix bzip2)/include"
    CPPFLAGS="${CPPFLAGS:-} -I$(brew --prefix openssl)/include"
    PKG_CONFIG_PATH="${PKG_CONFIG_PATH:-}:/usr/local/opt/libarchive/lib/pkgconfig"

    (
        # A travis-caching version of
        # https://apertium.projectjj.com/osx/install-nightly.sh
        WHERE='/usr/local'
        # Other locales may make Perl unhappy
        export LANG=en_US.UTF-8
        export LC_ALL=en_US.UTF-8
        mkdir -p "$HOME"/gtd-cache
        tarball="$HOME"/gtd-cache/apertium-all-dev.tar.bz2
        if [[ -f "${tarball}" ]]; then
            stat -f "Reusing cached %N from %Sm" "${tarball}" # assuming BSD stat
        else
            curl https://apertium.projectjj.com/osx/nightly/apertium-all-dev.tar.bz2 > "${tarball}"
        fi
        cd
        tar -jxf "${tarball}"
        cd apertium-all-dev
        (
            set +e
            find . -type f -name '*.la' -exec rm -fv '{}' \;
        )
        echo "Fixing hardcoded paths"
        FILES=$(grep -El '^#!/' $(grep -rl '/usr/local' bin))
        FILES="$FILES $(grep -rl '/usr/local' lib/pkgconfig)"
        for FILE in $FILES; do
            echo "Fixing $FILE"
            perl -pe "s@/usr/local@$WHERE@g;" -i.orig "$FILE"
        done
        sudo mkdir -p "$WHERE/"
        sudo cp -af ./* "$WHERE/"
        sudo chmod -R uga+r "$WHERE"
        vislcg3 --version
    )
else
    wget http://apertium.projectjj.com/apt/install-nightly.sh -O - | sudo bash
    sudo apt-get -f install -y libhfst-dev libcg3-dev hfst-ospell-dev swig3.0 libpython3-dev
fi

./autogen.sh
./configure "$@"
make -j3
make check VERBOSE=true
sudo make install

if [[ ${TRAVIS_OS_NAME} = osx && ${CC} = clang ]]; then
    # Rebuild with python 3.5.4, should give us two _libdivvun*so's with different names in /usr/local/lib/â€¦
    for version in "3.5.5" "3.7.6"; do
        (
            eval "$(pyenv init -)"
            pyenv install "${version}"
            pyenv global "${version}"
            ./configure "$@"
            (
                cd python
                make clean
                make
            )
            make -j3
            sudo make install
        )
    done
    scripts/bundle_mac_libs
fi
